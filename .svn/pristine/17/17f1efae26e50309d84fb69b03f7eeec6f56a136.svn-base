package com.xtensus.passosyf.controllers;

import java.security.Principal;

import javax.annotation.security.PermitAll;
import javax.naming.directory.DirContext;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.DisabledException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

 import com.xtensus.passosyf.ldap.ldap.business.LdapOperation;
import com.xtensus.passosyf.ldap.ldap.config.JwtUtil;
import com.xtensus.passosyf.ldap.ldap.model.JwtRequest;
import com.xtensus.passosyf.ldap.ldap.model.JwtResponse;
import com.xtensus.passosyf.ldap.ldap.model.Person;
import com.xtensus.passosyf.ldap.ldap.utils.CustomUserDetails;
import com.xtensus.passosyf.ldap.service.UserDetailsServiceImpl;

 

@CrossOrigin(origins = "*")
@RestController
@RequestMapping("rest")
public class Authentification {
	
	private static Logger log = LoggerFactory.getLogger(Authentification.class);

	@Autowired
	private UserDetailsServiceImpl  userDetailsServiceImpl;
	
	 @Autowired
	 private AuthenticationManager authenticationManager;
	 
	 
	 
	 @Autowired
	 private JwtUtil jwtUtil;
	
	DirContext dirContext ;
	
	
	/*@GetMapping("/login")
	public ResponseEntity<CustomUserDetails> login() {
System.out.println("hello ");
		try {
			Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();
			System.out.println(principal);
			if (principal instanceof CustomUserDetails) {
				
				return ResponseEntity.ok((CustomUserDetails) principal);

			}

		} catch (Exception e) {
			log.error("error in mehode login", e.getMessage());
		}

		return ResponseEntity.notFound().build();

	}*/
	
	
   @PostMapping("/generate-token")
    public ResponseEntity <?> generateToken(@RequestBody JwtRequest jwtRequest) throws Exception {

        try{
            authenticate(jwtRequest.getUsername(), jwtRequest.getPassword());

        }catch (UsernameNotFoundException e){
            e.printStackTrace();
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
       UserDetails userDetails=  this.userDetailsServiceImpl.loadUserByUsername(jwtRequest.getUsername());        

       
       String token=  this.jwtUtil.generateToken(userDetails);
       return ResponseEntity.ok(new JwtResponse(token));
    }
	
   
   @GetMapping("/current-user")
   public UserDetails getCurrentUser(Principal principal){
	   UserDetails userDetails = (UserDetails) SecurityContextHolder.getContext().getAuthentication()
               .getPrincipal();
 
      return  userDetails;       
   }
    
   
   
   
   
   
   
   
    private  void  authenticate(String username, String password) throws Exception {

        try{
            authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(username,password));

        }catch (DisabledException e){
            throw  new Exception("USER DISABLED"+e.getMessage());
        }catch (BadCredentialsException e){
            throw  new Exception("Invalid Credentials"+e.getMessage());
        }

    }
	

}








