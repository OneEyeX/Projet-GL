package com.xtensus.passosyf.controllers;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.xtensus.passosyf.entities.CommissionType;
import com.xtensus.passosyf.entities.Membre;
import com.xtensus.passosyf.entities.MembreType;
import com.xtensus.passosyf.services.CommissionTypeService;
import com.xtensus.passosyf.services.MembreService;

import lombok.AllArgsConstructor;

@RestController
@CrossOrigin(origins = "*")
@RequestMapping()
public class MembreController {
	
	private MembreService membreService;
	
	@Autowired
	public MembreController( MembreService membreService) {
		this.membreService=membreService;
		}
	
	@GetMapping(path = "allMembres")
	public ResponseEntity<List<Membre>> getAllMembres(){	
		List<Membre> membres=membreService.ListMembres();
		return new ResponseEntity<>(membres,HttpStatus.OK);
	}
	
	@PostMapping(path = "addMembre")
	public ResponseEntity<Membre> save(@RequestBody Membre membre) {		
		Membre membres=membreService.save(membre);
		return new ResponseEntity<>(membres,HttpStatus.CREATED);
	}
	
	@GetMapping(path = "findMembre/{ref}")
	public Membre getMembreByRef(@PathVariable(name = "ref") Integer ref){
		System.out.println("ref" +ref);
		return membreService.getMembreById(ref);
	}
	
	@DeleteMapping(path = "deleteMembre/{id}")
	public void delete(@PathVariable(name = "id") Integer id) {
		membreService.delete(id);
	}

	 @PutMapping("updateMembre/{id}")
	    public ResponseEntity<Membre> updateEmployee(@RequestBody Membre membre,@PathVariable(name = "id") Integer id) {
		 Membre updatemembre = membreService.update(membre,id);
	        return new ResponseEntity<>(updatemembre, HttpStatus.OK);
	    }
	 
		@GetMapping(path = "allMembresDisponibleCAM")
		public ResponseEntity<List<Membre>> getListMembresDisponibleCAM(){	
			List<Membre> membres=membreService.listMembresDisponibleCAM();
			return new ResponseEntity<>(membres,HttpStatus.OK);
		}
		
		@GetMapping(path = "allMembresDisponibleCP")
		public ResponseEntity<List<Membre>> listMembresDisponibleCP(){	
			List<Membre> membres=membreService.listMembresDisponibleCP();
			return new ResponseEntity<>(membres,HttpStatus.OK);
		}
		
		@GetMapping(path = "membreByMatricle/{matricule}")
		public ResponseEntity<Membre> membreByMatricule(@PathVariable(name = "matricule") String matricule){
			 try {
			Membre mbre = membreService.getMembreByMatricule(matricule);
			return new ResponseEntity<>(mbre,HttpStatus.OK);
			 }catch (Exception e) {
				 e.printStackTrace();
			        return new ResponseEntity<>(null, HttpStatus.NOT_FOUND); 
			}
			
		}
		@GetMapping(value ="/membreOfReunion/{idReunion}")
		public List<Membre> membreOfReunion(@PathVariable int idReunion){
			
			return membreService.listMembresByReunion(idReunion);
		}
		
}
