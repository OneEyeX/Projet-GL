package com.xtensus.passosyf.controllers;

import java.io.BufferedInputStream;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.List;

import javax.websocket.server.PathParam;

import org.apache.chemistry.opencmis.client.api.Folder;
import org.apache.chemistry.opencmis.commons.data.ContentStream;
import org.apache.cxf.message.Attachment;
import org.springframework.core.io.ByteArrayResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.xtensus.passosyf.entities.CommissionType;
import com.xtensus.passosyf.entities.Document;
import com.xtensus.passosyf.services.DocumentService;
import com.xtensus.passosyf.servicesImp.CmisService;
import com.xtensus.passosyf.utils.DocumentModel;
import java.util.Base64;
@RestController
@CrossOrigin(origins = "*")
@RequestMapping(path = "/api/v1")
public class DocumentController {
	
	
	private CmisService cmisService;
	private DocumentService documentService;
	
	public DocumentController(DocumentService documentService,CmisService cmisService) {
		this.documentService=documentService;
		this.cmisService=cmisService;
	}

	@GetMapping(path = "allDocumentReunion/{idReunion}")
	public ResponseEntity<List<Document>> getAllDocumentsReunion(@PathVariable("idReunion") Integer idReunion){	
		List<Document> documents=documentService.listDocumentsByReunion(idReunion, true, 1);
		System.out.println("Liste documents des reunion "+documents.size());
		return new ResponseEntity<>(documents,HttpStatus.OK);
	}

	@GetMapping(path = "allDocumentSalle")
	public ResponseEntity<List<Document>> getAllDocumentsSalle(){	
	//	List<Document> types=documentService.listDocuments();
		
		
		return null;
	}
	@GetMapping(path = "download/{fileId}")
    public ResponseEntity<Object> downloadDocument(@PathVariable String fileId,String folderName) throws IOException{
		System.out.println("fileId "+fileId);
		byte[] attachment=null;
		org.apache.chemistry.opencmis.client.api.Document document;
		Folder root = cmisService.CreateFolder(cmisService.getRootFolder(), "Passosyf2023");
		 
		Folder folder = cmisService.CreateFolder(root, folderName );
		document=cmisService.DownloadDocument(fileId,folder);
		ContentStream content = document.getContentStream();
		BufferedInputStream stream = new BufferedInputStream(content.getStream());
		attachment = stream.readAllBytes();
		System.out.println("bytes" + attachment.length);
		stream.close();
		ByteArrayResource resource = new ByteArrayResource(attachment);
		HttpHeaders headers = new HttpHeaders();
		headers.add("Cache-Control", "no-cache, no-store, must-revalidate");
		String name = document.getName();
		System.out.println("name ====> "+name);
		headers.add(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=" + name);
		headers.add("Pragma", "no-cache");
		headers.add("Expires", "0");
		return ResponseEntity.ok().headers(headers).contentLength(attachment.length)
				.contentType(MediaType.APPLICATION_OCTET_STREAM).body(resource);

    	
    }
	
	@PostMapping(path = "saveDoc")
	public ResponseEntity<Object> saveDocument(@RequestParam("file") MultipartFile files,
			@ModelAttribute Document document,String folderName) throws IOException{	
		
		System.out.println("dans méthiode save");
		System.out.println("files "+files);
		String typeUlpoad="non";
		Folder root = cmisService.CreateFolder(cmisService.getRootFolder(), "Passosyf2023");
		Folder folder = cmisService.CreateFolder(root, folderName);
		
		System.out.println("files "+files);
		String name = files.getOriginalFilename();
		String extension = name.substring(name.lastIndexOf(".") + 1);
		String name1=folderName+"_Doc"+document.getIdDocument()+"."+extension ; 

		
		System.out.println("name====> "+name);
		System.out.println("extension====> "+extension);
		System.out.println(" files.getBytes()====> "+ files.getBytes());
		//create document 
		org.apache.chemistry.opencmis.client.api.Document docum = cmisService.createDocument(folder, name1,
				extension, files.getBytes());
		
		System.out.println("ddddddddddddd "+docum.getId());
		String idAlfresco=docum.getId();
		String alfrescoId=idAlfresco.substring(24, idAlfresco.length());
		document.setDocumentAlfrescoId(alfrescoId);
		document.setDocumentType(extension);
		document.setDocumentNom(name1);
		LinkedHashMap<String, String> msg = new LinkedHashMap<String, String>();

		try {
		Document doc =documentService.save(document, typeUlpoad);
		msg.put("message", "files uploaded successfully");
		return ResponseEntity.status(202).body(msg);
		}catch (Exception e) {
			// TODO: handle exception
			msg.put("message", "Could not upload the filey");
		      return ResponseEntity.status(HttpStatus.EXPECTATION_FAILED).body((msg));

		}

	}
	
	@PostMapping(path = "test",produces = MediaType.APPLICATION_JSON_VALUE,consumes = { MediaType.APPLICATION_JSON_VALUE, MediaType.MULTIPART_FORM_DATA_VALUE})
	public ResponseEntity<Object> updateDocument(@RequestPart("doc") Document document,
			@RequestPart("file") MultipartFile files,String folderName) throws IOException{
		
		System.out.println("dans méthiode save");
		System.out.println("files "+files);
		String typeUlpoad="non";
		Folder root = cmisService.CreateFolder(cmisService.getRootFolder(), "Passosyf2023");
		Folder folder = cmisService.CreateFolder(root, folderName);
		
		System.out.println("files "+files);
		String name = files.getOriginalFilename();
		String extension = name.substring(name.lastIndexOf(".") + 1);
		
		String name1=folderName+"_Doc"+document.getIdDocument()+"."+extension ; 

		System.out.println("name====> "+name);
		System.out.println("extension====> "+extension);
		System.out.println(" files.getBytes()====> "+ files.getBytes());
		//create document 
		org.apache.chemistry.opencmis.client.api.Document docum = cmisService.createDocument(folder, name1,
				extension, files.getBytes());
		System.out.println("id alfresco avant modif "+document.getDocumentAlfrescoId());
		System.out.println("id alfresco apres modif "+docum.getId());
		String idAlfresco=docum.getId();
		String alfrescoId=idAlfresco.substring(24, idAlfresco.length());
		System.out.println("alfresco id "+alfrescoId);

		document.setDocumentAlfrescoId(alfrescoId);
		//document.setDocumentType(extension);
		System.out.println("document avant save ==> "+document );
		Document doc =documentService.save(document, typeUlpoad);
		LinkedHashMap<String, String> msg = new LinkedHashMap<String, String>();
		msg.put("message", "files uploaded successfully");
		return ResponseEntity.status(202).body(msg);
		
	}
	

	public void deleteDocument(@RequestParam("file") MultipartFile files,
			@ModelAttribute Document document) throws IOException{	
		
		//delete document 
		document.setDocumentSupprime(false);		
		documentService.save(document,"");
		
	}
	
	
	//	@PostMapping(path = "updateDoc")
//	public ResponseEntity<Object> updateDocument(@RequestParam("photo") MultipartFile files,
//			@ModelAttribute Document document) throws IOException{	
//		System.out.println("document ==========> "+document);
//
//		
//
//	}
//	@GetMapping("updateDoc/{nodeId}")
//	public ResponseEntity<ByteArrayResource> handleFilesDownload(@PathVariable String nodeId) {
//		byte[] decodedBytes = Base64.getUrlDecoder().decode(encodedUrl);
//		String decodedUrl = new String(decodedBytes);
//
//		byte[] bytes = AlfrescoUtils.DownloadDocument(decodedUrl);
//		ByteArrayResource resource = new ByteArrayResource(bytes);
//		
//		String fileNameAlfresco = decodedUrl.substring(decodedUrl.lastIndexOf("/") + 1);
//		String originalFileName = fileNameAlfresco.substring(fileNameAlfresco.lastIndexOf("_") + 1);
//		
//		HttpHeaders headers = new HttpHeaders();
//		headers.add("Cache-Control", "no-cache, no-store, must-revalidate");
//		headers.add(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=" + originalFileName);
//		headers.add("Pragma", "no-cache");
//		headers.add("Expires", "0");
//		return ResponseEntity.ok().headers(headers).contentLength(bytes.length)
//				.contentType(MediaType.APPLICATION_OCTET_STREAM).body(resource);
//
//	}
	
//	@GetMapping("/{urlPath}/{id}/{encodedUrl}")
//	public ResponseEntity<ByteArrayResource> handleFilesDownload(@PathVariable String urlPath, @PathVariable String id,
//			@PathVariable String encodedUrl) {
//		byte[] decodedBytes = Base64.getUrlDecoder().decode(encodedUrl);
//		String decodedUrl = new String(decodedBytes);
//
//		byte[] bytes = cmisService.DownloadDocument(decodedUrl);
//		ByteArrayResource resource = new ByteArrayResource(bytes);
//		
//		String fileNameAlfresco = decodedUrl.substring(decodedUrl.lastIndexOf("/") + 1);
//		String originalFileName = fileNameAlfresco.substring(fileNameAlfresco.lastIndexOf("_") + 1);
//		
//		HttpHeaders headers = new HttpHeaders();
//		headers.add("Cache-Control", "no-cache, no-store, must-revalidate");
//		headers.add(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=" + originalFileName);
//		headers.add("Pragma", "no-cache");
//		headers.add("Expires", "0");
//		return ResponseEntity.ok().headers(headers).contentLength(bytes.length)
//				.contentType(MediaType.APPLICATION_OCTET_STREAM).body(resource);
//
//	}
}
