package com.xtensus.passosyf.servicesImp;

import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.math.BigInteger;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.annotation.PostConstruct;

import org.apache.chemistry.opencmis.client.api.CmisObject;
import org.apache.chemistry.opencmis.client.api.Document;
import org.apache.chemistry.opencmis.client.api.Folder;
import org.apache.chemistry.opencmis.client.api.ItemIterable;
import org.apache.chemistry.opencmis.client.api.ObjectId;
import org.apache.chemistry.opencmis.client.api.ObjectType;
import org.apache.chemistry.opencmis.client.api.OperationContext;
import org.apache.chemistry.opencmis.client.api.QueryResult;
import org.apache.chemistry.opencmis.client.api.Relationship;
import org.apache.chemistry.opencmis.client.api.Session;
import org.apache.chemistry.opencmis.client.api.SessionFactory;
import org.apache.chemistry.opencmis.client.runtime.SessionFactoryImpl;
import org.apache.chemistry.opencmis.commons.PropertyIds;
import org.apache.chemistry.opencmis.commons.SessionParameter;
import org.apache.chemistry.opencmis.commons.data.ContentStream;
import org.apache.chemistry.opencmis.commons.enums.BaseTypeId;
import org.apache.chemistry.opencmis.commons.enums.BindingType;
import org.apache.chemistry.opencmis.commons.enums.RelationshipDirection;
import org.apache.chemistry.opencmis.commons.enums.VersioningState;
import org.apache.chemistry.opencmis.commons.impl.dataobjects.ContentStreamImpl;
import org.apache.cxf.message.Attachment;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.xtensus.passosyf.utils.AlfrescoUtils;

/**
 * CMIS Service to handle operations within the session.
 * 
 * @author aborroy
 *
 */
@Service
public class CmisService
{

    // Set values from "application.properties" file
    @Value("${alfresco.repository.url}")
    String alfrescoUrl;
    @Value("${alfresco.repository.user}")
    String alfrescoUser;
    @Value("${alfresco.repository.pass}")
    String alfrescoPass;

    // CMIS living session
    private Session session;
    private static HashMap<String, String> mimeTypeMapping;

	static {
		mimeTypeMapping = new HashMap<String, String>();

			
		mimeTypeMapping.put("gif", "image/gif");
		mimeTypeMapping.put("jpeg", "image/jpeg");
		mimeTypeMapping.put("jpg", "image/jpeg");
		mimeTypeMapping.put("png", "image/png");
		mimeTypeMapping.put("pdf", "application/pdf");
		mimeTypeMapping.put("docx", "application/docx");
		mimeTypeMapping.put("doc", "application/doc");
		mimeTypeMapping.put("xlsx", "application/xlsx");
		mimeTypeMapping.put("xls", "application/xls");
	}
	public String getMimeType(String ext) {
		return mimeTypeMapping.get(ext.toLowerCase());
	}
    @PostConstruct
    public void init()
    {
    	try {
    	System.out.println("dans ini");
    	
    	System.out.println("alfrescoUrl "+alfrescoUrl);
    	System.out.println("alfrescoUser "+alfrescoUser);
    	System.out.println("alfrescoPass "+alfrescoPass);

        String alfrescoBrowserUrl = alfrescoUrl;

        Map<String, String> parameter = new HashMap<String, String>();

        parameter.put(SessionParameter.USER, alfrescoUser);
        parameter.put(SessionParameter.PASSWORD, alfrescoPass);
        
        parameter.put(SessionParameter.ATOMPUB_URL, alfrescoBrowserUrl);
        parameter.put(SessionParameter.BINDING_TYPE, BindingType.ATOMPUB.value());
        for (Map.Entry mapentry : parameter.entrySet()) {
            System.out.println("clé: "+mapentry.getKey() 
                               + " | valeur: " + mapentry.getValue());
         }
        SessionFactory factory = SessionFactoryImpl.newInstance();
        System.out.println("factory=============="+factory);
        System.out.println("factory.getRepositories=============="+factory.getRepositories(parameter));
        System.out.println("factory==============");

        session = factory.getRepositories(parameter).get(0).createSession();
       Folder root=session.getRootFolder();
       System.out.println("affiche le rooooot ==>"+root);
    	}catch (Exception e) {
			
    		e.printStackTrace();
    	}

    }
    
    public Folder getRootFolder()
    {
        return session.getRootFolder();
    }
    

    //create dococument Final
    public Document createDocument(Folder folder, String documentName,String contentType, byte[] content)
    {
    	System.out.println("########## folder ############# "+folder);
    	System.out.println("########## documentName ############# "+documentName);
    	System.out.println("########## documentName ############# "+content.length);
    	Document document = null;
    	ItemIterable<CmisObject> children = folder.getChildren();
    	//Js: Vérifier si le document existe déja 
    	for (CmisObject child : children) {
    		System.out.println("child.getName() "+child.getId());    		

    		System.out.println("child.getName() "+child.getName());    		
    		if (child.getName().equals(documentName)) {
				document = (Document) child;
				document.delete();
				document = null;
				break;
			}
    	}
    	
    	if (document == null) {
    		 Map<String, Object> properties = new HashMap<String, Object>();
    	     properties.put(PropertyIds.OBJECT_TYPE_ID, "cmis:document");
    	     properties.put(PropertyIds.NAME, documentName);
    	     String mime = "";
    	        InputStream stream = new ByteArrayInputStream(content);      
    	        mime = getMimeType(contentType);
    	        System.out.println("Mime "+mime);
    	        ContentStream contentStream = new ContentStreamImpl(documentName, 
    					BigInteger.valueOf(content.length), 
    					mime,
    					stream);
    	        document=folder.createDocument(properties, contentStream, VersioningState.MAJOR);
    	}
       
        return document;
    }
    
    //create Folder
    public  Folder CreateFolder(Folder baseFolder, String folderName) {
		Folder folder = null;
		ItemIterable<CmisObject> children = baseFolder.getChildren();
		for (CmisObject child : children) {
			if (child.getName().equals(folderName)) {
				folder = (Folder) child;
				break;
			}
		}
		
		//Créer un nouveau Folder 
		if (folder == null) {
			Map<String, Object> properties = new HashMap<String, Object>();
			properties.put(PropertyIds.OBJECT_TYPE_ID, "cmis:folder");
			//nom de nouveau dossier 
			properties.put(PropertyIds.NAME, folderName);
			//baseFolder : root 
			//foldername : dossier à créer
			folder = baseFolder.createFolder(properties);
		}
		
		return folder;
	}
    
    
    
	public  Document DownloadDocument(String fileId,Folder folder) throws IOException {
		//Session session = AlfrescoUtils.AlfrescoSession();
		System.out.println("session===> "+session);
		System.out.println("fileId "+fileId);
		ItemIterable<CmisObject> children = folder.getChildren();
		byte[] bytes = null ;
		Document document = null;
    	//Js: Vérifier si le document existe déja 
		for (CmisObject child : children) {
			System.out.println("child.getName() " + child.getId());
			// lastindex :enlever 24
			String alfresco = child.getId().substring(child.getId().lastIndexOf("/")+1);
			System.out.println("alfresco " + alfresco);
			System.out.println(fileId.equals(alfresco));
			session.getObject(child.getId());
			if (fileId.equals(alfresco)) {
				String chaine = "workspace://SpacesStore/";
				String node = chaine + fileId;
				System.out.println(node);
				CmisObject cmisObject = session.getObject(node);
				System.out.println(cmisObject instanceof Document);
				if (cmisObject instanceof Document) {
					document = (Document) cmisObject;
					System.out.println("document ===========================> " + document.getName());
					System.out.println("document ===========================> " + document.getContentStreamMimeType());

					
				}

			}

		}

		return document;
	}
	
	
	
	
public  Document DownloadDocument(Integer idModel,Integer idDocument ,String model,String extension) throws IOException {		
		
		System.out.println("dans downloadDocumentByID"+session.getRootFolder());
		Document document = null;
	System.out.println("/Passosyf2023/"+model+"_"+idModel+"/"+model+"_"+idModel+"_Doc"+idDocument+"."+extension);
         CmisObject doc = session.getObjectByPath("/Passosyf2023/"+model+"_"+idModel+"/"+model+"_"+idModel+"_Doc"+idDocument+"."+extension);
        if(doc instanceof Document) {
        	document=(Document) doc;
        	
        }		
        return document;
	}






public  void deleteFolder(Integer idModel,Integer idDocument ,String model,String extension) {
	 
	 CmisObject doc = session.getObjectByPath("/Passosyf2023/"+model+"_"+idModel+"/"+model+"_"+idModel+"_Doc"+idDocument+"."+extension);
	 doc.delete();
	
	 
	
}
    
    
    
    
    
    
    
    
    
    
    
    
    
    //create Document
//    public  Document CreateDocument(Folder folder, String fileName, String contentType, byte[] content) {
//		Document document = null;
//		ItemIterable<CmisObject> children = folder.getChildren();
//		for (CmisObject child : children) {
//			if (child.getName().equals(fileName)) {
//				document = (Document) child;
//				document.delete();
//				document = null;
//				break;
//			}
//		}
//		
//		if (document == null) {
//			Map<String, Object> documentProperties = new HashMap<String, Object>();
//			documentProperties.put(PropertyIds.OBJECT_TYPE_ID, "cmis:document");
//			documentProperties.put(PropertyIds.NAME, fileName);
//
//			InputStream stream = new ByteArrayInputStream(content);
//			//String contentType = URLConnection.guessContentTypeFromName(fileName);
//			ContentStream _content = new ContentStreamImpl(fileName, 
//					BigInteger.valueOf(content.length), 
//					contentType,
//					stream);
//			
//			System.out.println("_content "+_content.getFileName());
//			System.out.println("lenght "+_content.getLength());
//
//			document = folder.createDocument(documentProperties, _content, VersioningState.MAJOR);
//		}
//		
//		return document;
//	}

    public ObjectId createRelationship(CmisObject sourceObject, CmisObject targetObject, String relationshipName)
    {

        Map<String, Object> properties = new HashMap<String, Object>();
        properties.put(PropertyIds.NAME, "a new relationship");
        properties.put(PropertyIds.OBJECT_TYPE_ID, relationshipName);
        properties.put(PropertyIds.SOURCE_ID, sourceObject.getId());
        properties.put(PropertyIds.TARGET_ID, targetObject.getId());

        return session.createRelationship(properties);

    }

    public void addAspect(CmisObject cmisObject, String aspect)
    {
    		System.out.println("dans addAspect");
        List<Object> aspects = cmisObject.getProperty("cmis:secondaryObjectTypeIds").getValues();
        Object[] object = new Object[aspects.size()];
        int i=0;
       for (Iterator<Object> it = aspects.iterator(); it.hasNext();) {
    	   object[i]= it.next();
    	   System.out.println("object[i] ===> "+object[i]);
       }
        if (!aspects.contains(aspect))
        {
            aspects.add(aspect);
            Map<String, Object> aspectListProps = new HashMap<String, Object>();
            aspectListProps.put(PropertyIds.SECONDARY_OBJECT_TYPE_IDS, aspects);
            cmisObject.updateProperties(aspectListProps);
        }

    }

    public void updateProperties(CmisObject cmisObject, Map<String, Object> properties)
    {
        cmisObject.updateProperties(properties);
    }

    public ItemIterable<Relationship> getRelationships(ObjectId objectId, String relationshipName)
    {

        ObjectType typeDefinition = session.getTypeDefinition(relationshipName);
        OperationContext operationContext = session.createOperationContext();
        return session.getRelationships(objectId, true, RelationshipDirection.EITHER, typeDefinition, operationContext);

    }

    public ItemIterable<QueryResult> query(String query)
    {
        return session.query(query, false);
    }

    public void remove(CmisObject object)
    {

        if (BaseTypeId.CMIS_FOLDER.equals(object.getBaseTypeId()))
        {
            Folder folder = (Folder) object;
            ItemIterable<CmisObject> children = folder.getChildren();
            for (CmisObject child : children)
            {
                remove(child);
            }
        }
        session.delete(object);
    }
	public Attachment getAttachment(String fileId) {
		// TODO Auto-generated method stub
		return null;
	}

}
