package com.xtensus.passosyf.controllers;

import java.io.BufferedInputStream;
import java.io.IOException;
import java.nio.file.Paths;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Set;

import org.apache.chemistry.opencmis.client.api.Folder;
import org.apache.chemistry.opencmis.commons.data.ContentStream;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ByteArrayResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.xtensus.passosyf.entities.Document;
import com.xtensus.passosyf.entities.Salle;
import com.xtensus.passosyf.entities.SalleModel;
import com.xtensus.passosyf.gnl.aop.LogClass;
import com.xtensus.passosyf.services.DocumentService;
import com.xtensus.passosyf.services.SalleEquipementService;
import com.xtensus.passosyf.services.SalleService;
import com.xtensus.passosyf.utils.EquipementModel;

import net.bytebuddy.implementation.bytecode.Throw;

import com.xtensus.passosyf.servicesImp.CmisService;


@CrossOrigin(origins = "*")
@RestController
@RequestMapping(path = "Salle")
public class SalleControler {

	@Autowired
	private SalleService salleService;
	@Autowired
	private SalleEquipementService salleEquipementService;
	
	@Autowired
	private DocumentService documentService;
	
	@Autowired
	private LogClass logClass;
	
	
	@Autowired
	private CmisService cmisService;
	@Autowired
	private DocumentController documentController;
	@GetMapping(path = "/listesalle")
	public List<Salle> getListeSalle() {
		 List<Salle> listeSalle=salleService.getListSalle();
		 logClass.addTrack(
					"consultation","Evénement de log consultation list salle ",/*vb.getPerson(),*/ "INFO");
		 return listeSalle;
	}
	
	
	@PostMapping(path =  "/ajoutsalle")
	public ResponseEntity<Salle> save(@RequestBody Salle salle) {		
		
		Salle salleAjoute=salleService.save(salle);
		 logClass.addTrack(
					"ajout","Evénement de log consultation ajout salle "+salleAjoute.getSalleId()+"-"+salleAjoute.getSalleLibelle(),/*vb.getPerson(),*/ "INFO");
		return new ResponseEntity<>(salleAjoute,HttpStatus.CREATED);
	}
	
	@PostMapping(path =  "/savesalle")
	public ResponseEntity<Salle> saveSalleModel(@RequestBody SalleModel salle) {		
		System.out.println(salle);
		Salle salleAjoute=salleService.saveSalle(salle);
		 logClass.addTrack(
					"ajout","Evénement de log consultation ajout salle "+salleAjoute.getSalleId()+"-"+salleAjoute.getSalleLibelle(),/*vb.getPerson(),*/ "INFO");
		return new ResponseEntity<>(salleAjoute,HttpStatus.CREATED);
	}
	
	
	
	@PutMapping(path = "updatesalle")
	public ResponseEntity<Salle> updateSalle(@RequestBody SalleModel salle) {		
		Salle salleModifee=salleService.updateSalle(salle);
		 logClass.addTrack(
					"modification","Evénement de log consultation modification salle "+salleModifee.getSalleId()+"-"+salleModifee.getSalleLibelle(),/*vb.getPerson(),*/ "INFO");
		
		return new ResponseEntity<>(salleModifee,HttpStatus.OK);
	}
	
	@DeleteMapping(path = "deletesalle/{idS}")
	public void deleteSalle(@PathVariable(name = "idS") Integer SalleId) {
		Salle salleById = salleService.findSalleById(SalleId); 
		
		salleEquipementService.deleteBySalleId(SalleId);
		salleService.deleteById(SalleId);
		
		logClass.addTrack(
				"suppression","Evénement de log suppression salle "+salleById.getSalleId()+"-"+salleById.getSalleLibelle(),/*vb.getPerson(),*/ "INFO");
	
	}
	
	@GetMapping(path = "findsalle/{idS}")
	public ResponseEntity<Salle> findSalleByID(@PathVariable(name = "idS") Integer SalleId) {
		Salle salleType=salleService.findSalleById(SalleId);
		logClass.addTrack(
				"consultation","Evénement de log consultation salle "+salleType.getSalleId()+"-"+salleType.getSalleLibelle(),/*vb.getPerson(),*/ "INFO");
	
		return  new ResponseEntity<>(salleType,HttpStatus.OK);
	}
	
	
	
	@GetMapping(path = "allDocumentSalle/{salleId}")
	public ResponseEntity<Set<Document>> getAllDocumentsSalle(@PathVariable("salleId") Integer salleId){	
		
	Set<Document> listDocumentSalle= documentService.listDocumentsBySalle(salleId);
	logClass.addTrack(
			"consultation","Evénement de log consultation list salle ",/*vb.getPerson(),*/ "INFO");

		
		return ResponseEntity.ok(listDocumentSalle); 
	}
	
	
	
	
	@PostMapping(path = "/saveDoc/{salleId}")
	public ResponseEntity<Object> saveDocument(
			@RequestPart(name="file", required = false) MultipartFile files,
			@RequestPart("doc") Document document, @PathVariable("salleId") Integer salleId
			 ) throws IOException{
		String typeUlpoad;
		LinkedHashMap<String, String> msg = new LinkedHashMap<String, String>();
	
		try {
			
			
			if(document.getDocumentTypeUpload().equals("Numérique")) {
			 
				 typeUlpoad="non";
				 document.setDocumentNom(files.getOriginalFilename());
		 		}else {
		 		 
		 			typeUlpoad="nom";	
		 		}
		Salle salle=new Salle();
		salle.setSalleId(salleId);
		
	
			document.setDocumentSalleId(salle);
			Document doc=documentService.save(document, typeUlpoad);
			String folderName="Salle_"+salleId;
			document.setDocumentReference("Ref-"+document.getIdDocument());
			if(document.getDocumentTypeUpload().equals("Numérique")) {
		 
			  documentController.saveDocument(files, document,folderName);
			}
			
		
				msg.put("message", "files uploaded succesfully");
				logClass.addTrack(
				 		"consultation","Evénement de log téléchargement document salle " ,/*vb.getPerson(),*/ "INFO");
				return ResponseEntity.status(202).body(msg);
			}catch (Exception e) {
				msg.put("message", "Could not upload the file");
				return ResponseEntity.status(HttpStatus.EXPECTATION_FAILED).body(msg); 
			}	
		
		
				//update dans table document
//			Folder root= cmisService.CreateFolder(cmisService.getRootFolder(), "Gestion");
//			Folder folder=cmisService.CreateFolder(root, "Salle_"+salleId);
//			Folder Doc = cmisService.CreateFolder(folder, "Doc_"+doc.getIdDocument());

			
//			String name="Salle"+doc.getIdDocument()+"_Doc"+doc.getIdDocument();
//			String extension = files.getOriginalFilename().substring(files.getOriginalFilename().lastIndexOf(".")+1);
			
	 
			//create document
//			org.apache.chemistry.opencmis.client.api.Document docum = cmisService.createDocument(Doc, name,
//					extension, files.getBytes());
//			String idAlfresco = docum.getId();
//			String alfrescoId=idAlfresco.substring(24, idAlfresco.length());
//			
			//update
//			document.setDocumentAlfrescoId(alfrescoId);
//			document.setDocumentType(extension);
//			document.setDocumentReference("Ref-");
//			documentService.save(document, typeUpload);
	
		
		
	}
	
	
	
	
	
	
	
	@DeleteMapping("/deleteDocument/{docId}")
	public ResponseEntity<?> deleteDocument(
    		@PathVariable("docId") Integer docId) {
		LinkedHashMap<String, String> msg = new LinkedHashMap<String, String>();

	 
		Document docu = documentService.getDocumentById(docId);
		
		org.apache.chemistry.opencmis.client.api.Document document;	
		try {
			// delete document dans la table document by document id 
			documentService.delete(docId); 
			
			// delete Folder from alfresco server 
			if(docu.getDocumentTypeUpload().equals("Numérique")) {
		cmisService.deleteFolder(docu.getDocumentSalleId().getSalleId(),docId,"Salle",docu.getDocumentType()); 
			}
		msg.put("message", "files Deleted succesfully");
		logClass.addTrack(
				"suppression","Evénement de log suppression document salle ",/*vb.getPerson(),*/ "INFO");

		return ResponseEntity.status(202).body(msg);
		}catch (Exception e) {
		 
			msg.put("message", "Could not delete the file");
			return ResponseEntity.status(HttpStatus.EXPECTATION_FAILED).body(msg); 
			
		}
	}
	
	
	@PutMapping(value = "/updateDocumentSalle"  )
	public ResponseEntity<Object> updateDocumentSalle(@RequestPart(  name = "file", required = false) MultipartFile files,
			@RequestPart(name = "doc") Document document) throws IOException{
					String typeUpload; String folderName; String name ; String extension;
		
		if(document.getDocumentTypeUpload().equals("Numérique")) {
			if(files!=null) {
		 
			typeUpload="non";
			 folderName="Salle_"+document.getDocumentSalleId().getSalleId();
				 name = files.getOriginalFilename();
		 extension = name.substring(name.lastIndexOf(".") + 1);
		document.setDocumentType(extension); 
		logClass.addTrack(
		 		"modification","Evénement de log modification document salle " ,/*vb.getPerson(),*/ "INFO");
			return documentController.updateDocument(document,files,folderName);
			}else {
			 
				typeUpload="non";
				logClass.addTrack(
				 		"modification","Evénement de log modification document salle " ,/*vb.getPerson(),*/ "INFO");
				return ResponseEntity.ok(documentService.save(document, typeUpload));
			}
			
		}
		else {
 
			if (!document.getDocumentTypeUpload().equals("Numérique")) {
			 
			
				typeUpload="nom";
			}else {
		 
				 name = files.getOriginalFilename();
			 extension = name.substring(name.lastIndexOf(".") + 1);
			 folderName="Salle_"+document.getDocumentSalleId().getSalleId();
				document.setDocumentType(extension); 
				typeUpload="non";
				documentController.updateDocument(document,files,folderName);
			}
			logClass.addTrack(
			 		"modification","Evénement de log modification document salle " ,/*vb.getPerson(),*/ "INFO");
			return ResponseEntity.ok(documentService.save(document, typeUpload));
		}
	}
	
	
	
 
	
	
	@GetMapping("/document/{documentId}")
	public Document getDocumentById(@PathVariable Integer documentId) {
		Document documentById = documentService.getDocumentById(documentId);
		
		logClass.addTrack(
		 		"consultation","Evénement de log consultation document salle "+documentById.getIdDocument()+"-"+documentById.getDocumentNom() ,/*vb.getPerson(),*/ "INFO");
		return documentById;
	}
	
	
	
	@GetMapping(path = "download/{salleId}/{docId}")
    public ResponseEntity<Object> downloadDocument(@PathVariable("salleId") Integer salleId,
    		@PathVariable("docId") Integer docId) throws IOException{
		byte[] attachment=null;
	
		Document docu = documentService.getDocumentById(docId);
		
		org.apache.chemistry.opencmis.client.api.Document document;		
		Folder folder = cmisService.getRootFolder();
		
 
		document=cmisService.DownloadDocument(salleId,docId,"Salle",docu.getDocumentType());	
		
		ContentStream content = document.getContentStream();
		BufferedInputStream stream = new BufferedInputStream(content.getStream());
		attachment = stream.readAllBytes();
		stream.close();
		ByteArrayResource resource = new ByteArrayResource(attachment);
		HttpHeaders headers = new HttpHeaders();
		headers.add("Cache-Control", "no-cache, no-store, must-revalidate");
		String name = document.getName();
	
		headers.add(HttpHeaders.CONTENT_DISPOSITION,"inline;filename=" + name +"."+docu.getDocumentType());
		headers.add("Pragma", "no-cache");
		headers.add("Expires", "0");
		
		logClass.addTrack(
		 		"consultation","Evénement de log téléchargement document salle "+document.getName(),/*vb.getPerson(),*/ "INFO");
		return ResponseEntity.ok().headers(headers).contentLength(attachment.length)
				.contentType(MediaType.APPLICATION_OCTET_STREAM).body(resource);

    	
    }
	
	@GetMapping("/disponible/{id}")
	List<Salle> getSalleDisponible(@PathVariable("id") Integer reunionId){
		
		System.out.println(reunionId);
		logClass.addTrack(
		 		"consultation","Evénement de log consultation list salle disponible" ,/*vb.getPerson(),*/ "INFO");
		
		return salleService.getSalleDisponible(reunionId);
	}
	
	
	
}
