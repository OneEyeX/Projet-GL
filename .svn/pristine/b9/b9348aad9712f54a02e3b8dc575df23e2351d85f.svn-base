package com.xtensus.passosyf.controllers;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.xtensus.passosyf.entities.CommissionType;
import com.xtensus.passosyf.gnl.aop.LogClass;
import com.xtensus.passosyf.services.CommissionTypeService;

import lombok.AllArgsConstructor;

@RestController
@CrossOrigin(origins = "*")
@RequestMapping(path = "/api/v1")
public class CommissionTypeController {
	
	private CommissionTypeService commissionTypeService;
	
	@Autowired
	private LogClass logClass;
	
	
	@Autowired
	public CommissionTypeController( CommissionTypeService commissionTypeService) {
		this.commissionTypeService=commissionTypeService;
		}
	
	@GetMapping(path = "all")
	public ResponseEntity<List<CommissionType>> getAllCommissionType(){	
		List<CommissionType> types=commissionTypeService.listCommissionType();
		logClass.addTrack(
				"consultation","Evénement de log consultation list Type commission ",/*vb.getPerson(),*/ "INFO");
			  
		return new ResponseEntity<>(types,HttpStatus.OK);
	}
	
	@PostMapping(path = "add")
	public ResponseEntity<CommissionType> save(@RequestBody CommissionType commissionType) {		
		System.out.println("Afffiche Commision type  "+commissionType);
		CommissionType typecommission=commissionTypeService.save(commissionType);
		logClass.addTrack(
				"ajout","Evénement de log ajout type commission "+typecommission.getCommissionTypeReference() + "-"+typecommission.getCommissionTypeLibelle(),/*vb.getPerson(),*/ "INFO");
		
		return new ResponseEntity<>(typecommission,HttpStatus.CREATED);
	}
	
	@GetMapping(path = "find/{id}")
	public CommissionType getCommissionTypeByRef(@PathVariable(name = "id") Integer ref){
		CommissionType typeComm= commissionTypeService.getCommissionTypeById(ref);
		logClass.addTrack(
				"consultation","Evénement de log consultation type commission "+typeComm.getCommissionTypeReference() + "-"+typeComm.getCommissionTypeLibelle(),/*vb.getPerson(),*/ "INFO");
		
			  
		return typeComm; 
	}
	
	@DeleteMapping(path = "delete/{id}")
	public void delete(@PathVariable(name = "id") Integer ref) {
		CommissionType typeComm= commissionTypeService.getCommissionTypeById(ref);

		logClass.addTrack(
		"suppression","Evénement de log suppression type commission "+typeComm.getCommissionTypeReference() + "-"+typeComm.getCommissionTypeLibelle(),/*vb.getPerson(),*/ "INFO");

		
		 commissionTypeService.delete(ref);
	}

	 @PutMapping("/update")
	    public ResponseEntity<CommissionType> updateEmployee(@RequestBody CommissionType type) {
		 CommissionType updateTypeCommission = commissionTypeService.update(type);

			logClass.addTrack(
					"modification","Evénement de log modification type commission "+type.getCommissionTypeReference() + "-"+type.getCommissionTypeLibelle(),/*vb.getPerson(),*/ "INFO");
			
			
	        return new ResponseEntity<>(updateTypeCommission, HttpStatus.OK);
	    }
}
