package com.xtensus.passosyf.controllers;

import java.io.BufferedInputStream;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import javax.servlet.http.HttpServletResponse;

import org.apache.chemistry.opencmis.client.api.Folder;
import org.apache.chemistry.opencmis.commons.data.ContentStream;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ByteArrayResource;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.util.ResourceUtils;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.xtensus.passosyf.entities.Document;
import com.xtensus.passosyf.entities.Membre;
import com.xtensus.passosyf.entities.Reunion;
import com.xtensus.passosyf.gnl.aop.LogClass;
import com.xtensus.passosyf.services.DocumentCategorieService;
import com.xtensus.passosyf.services.DocumentService;
import com.xtensus.passosyf.services.MembreService;
import com.xtensus.passosyf.services.ReunionService;
import com.xtensus.passosyf.servicesImp.CmisService;
import com.xtensus.passosyf.servicesImp.Export;
import com.xtensus.passosyf.utils.ArticleExcel;
import com.xtensus.passosyf.utils.MembreModel;
import com.xtensus.passosyf.utils.RapportModel;
import com.xtensus.passosyf.utils.StatistiqueModel;

import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;

@RestController
@CrossOrigin(origins = "*")
@RequestMapping(path = "Reunions")
public class ReunionControlleur {

	@Autowired
	private ReunionService reunionService;
	
	@Autowired
	private DocumentController documentController;
	@Autowired
	private DocumentCategorieService documentCategorieDao;
	@Autowired
	private MembreService membreService;
	
	@Autowired
	private Export export;
	
	@Autowired
	private DocumentService documentService;
	
	@Autowired
	private CmisService cmisService;
	
	@Autowired
	private LogClass logClass;
	
	
	private boolean validation;
	
	@GetMapping(value = "/reunions", produces = "application/json")
	public Iterable<Reunion> getAllReunions() {
		
		logClass.addTrack(
				"consultation","Evénement de log consultation list reunion ",/*vb.getPerson(),*/ "INFO");
	
		return reunionService.findAll();
	}
	@PostMapping(value = "/reunion", produces = "application/json")
	public void saveReunion( @RequestBody Reunion reunion) {
		Reunion savedReunion = reunionService.save(reunion);
		
		logClass.addTrack(
				"ajout","Evénement de log ajout reunion "+savedReunion.getReunionId(),/*vb.getPerson(),*/ "INFO");
		
	}
	
	@PutMapping(value = "/reunion", produces = "application/json")
	public void updateReunion( @RequestBody Reunion reunion) {
		Reunion savedReunion = reunionService.save(reunion);
		
		logClass.addTrack(
				"modification","Evénement de log modification reunion "+savedReunion.getReunionId(),/*vb.getPerson(),*/ "INFO");
	}
	
	@GetMapping(value = "/reunion/{id}", produces = "application/json")
	public Optional<Reunion> getReunionById(@PathVariable int id) {
		Optional<Reunion> reunion = reunionService.findById(id);
		logClass.addTrack(
				"consultation","Evénement de log consultation reunion "+reunion.get().getReunionId(),/*vb.getPerson(),*/ "INFO");
	
		return reunion; 
	}
	
	@GetMapping(value = "/reunions/objet/{s}", produces = "application/json")
	public Iterable<Reunion> findByReunionObjet(@PathVariable String s) {
		
		Iterable<Reunion> reunionObjet = reunionService.findByReunionObjet(s);
		logClass.addTrack(
				"consultation","Evénement de log consultation reunion by objet "+ s,/*vb.getPerson(),*/ "INFO");
	
		return reunionObjet ;
	}
	
	@GetMapping(value = "/reunions/resume/{s}", produces = "application/json")
	public Iterable<Reunion> findByReunionreunionResume(@PathVariable String s) {
		return reunionService.findByReunionResume(s);
	}
	
	@GetMapping(value = "/reunions/salle/{s}", produces = "application/json")
	public Iterable<Reunion> findBySalleSalleId(@PathVariable int s) {
		return reunionService.findBySalleSalleId(s);
	}
	
	@DeleteMapping(value = "/deleteReunion/{s}", produces = "application/json")
	public void deleteReunion(@PathVariable int s) {
		Reunion reunion = reunionService.findById(s).get();
		logClass.addTrack(
				"suppression","Evénement de log suppression reunion "+ reunion.getReunionId(),/*vb.getPerson(),*/ "INFO");
	
		reunionService.deleteById(s);
	}
	
	@GetMapping(value = "/reunions/salleAndDate/{s}&{date}", produces = "application/json")
	public Iterable<Reunion> listeReunionsBySalleIdAndDates(@PathVariable int s, @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) @PathVariable Date date) {
		System.out.println("###### dans listeReunionsBySalleIdAndDates" + s + " " + date);
		
		Reunion reunion = reunionService.findById(s).get();

		 logClass.addTrack(
					"consultation","Evénement de log consultation list reunion by salle et date  "+reunion.getReunionId() ,/*vb.getPerson(),*/ "INFO");
		
		return reunionService.listeReunionsBySalleIdAndDates(s,date);
	}
	
	@PutMapping(value = "/reunion/{idEtat}", produces = "application/json")
	public void changeEtatReunion( @RequestBody Reunion reunion, @PathVariable int idEtat) {
	  reunionService.changeEtatReunion(idEtat,reunion);
		
		logClass.addTrack(
				"modification","Evénement de log modification etat reunion "+reunion.getReunionId() ,/*vb.getPerson(),*/ "INFO");
	
	}
	
//	@PutMapping(value = "/reunion/affecterMembre", produces = "application/json")
//	public void affecterMembreReunion(@RequestBody Reunion reunion, @RequestBody List<MembreModel> listeMembreModel) {
//		reunionService.affecterMembreReunion(reunion, listeMembreModel);
//	}
	
	
	
	
	@PostMapping(value="/reunion/affecterMembre/{idReunion}", produces = "application/json")
	public void affecterMembre(@PathVariable int idReunion, @RequestBody List<MembreModel> listeMembreModel) {
		System.out.println("#### idReunion = "+idReunion + " membres = "+listeMembreModel.size());
		Optional<Reunion> reunion = this.reunionService.findById(idReunion);
		System.out.println("reunion = "+reunion.get() + " membres = "+listeMembreModel.size());
		this.reunionService.affecterMembreReunion(reunion.get(), listeMembreModel);
		
		logClass.addTrack(
				"affectation","Evénement de log affectation membre réunion  "+reunion.get().getReunionId() ,/*vb.getPerson(),*/ "INFO");
	
	}
	
	@PutMapping(value = "/reunionAffestationSalle/{idSalle}")
	public void affecterSalleReunion(@PathVariable int idSalle,  @RequestBody Reunion reunion) {
		System.out.println("idSalle---> "+idSalle);
		
		System.out.println(reunion.toString());
		reunionService.affecterSalleReunion(idSalle, reunion);
		
		logClass.addTrack(
				"affectation","Evénement de log affectation salle réunion  "+reunion.getReunionId() ,/*vb.getPerson(),*/ "INFO");
	
	}
	
	@GetMapping(value = "/envoyerConvocation")
	public void envoyerConvocation() {
	}

	@PostMapping(value = "/ordreDeJour/{idReunion}/{idCategorie}")
	public void ordreDeJour( @RequestPart(name="file", required = false) MultipartFile files, @RequestPart("doc") Document document,
							 @PathVariable ("idReunion") int idReunion, @PathVariable ("idCategorie") int idCategorie) throws IOException {
		String typeUlpoad;
		Document savedDocument; 
		

 		if(files!=null) {
		 typeUlpoad="non";
		 document.setDocumentNom(files.getOriginalFilename());
 		}else {
 			typeUlpoad="nom";	
 		}
//		Document document= new Document();
		//document.setDocumentCategorie(documentCategorieDao.findByDocumentCategorieId(idCategorie));
		document.setReunion(reunionService.findById(idReunion).get());
		String folderName="OrdreDeJour_"+idReunion;
	 
		savedDocument = documentService.save(document, typeUlpoad);
		if(files!=null) {
		documentController.saveDocument(files, savedDocument,folderName);
		}
		
		logClass.addTrack(
				"ajout","Evénement de log ajout ordre de jour ",/*vb.getPerson(),*/ "INFO");
		
	}
	
	
	@GetMapping(value = "/ordreDeJour/doc/{idReunion}/{fileId}")
	 public ResponseEntity<Object> downloadFile(@PathVariable ("fileId") Integer fileId,@PathVariable ("idReunion") int idReunion ) throws IOException {

		String folderName="OrdreDeJour_"+idReunion;
		byte[] attachment=null;
		
		Document docu = documentService.getDocumentById(fileId);
		
		org.apache.chemistry.opencmis.client.api.Document document;		
		Folder folder = cmisService.getRootFolder();
		
 
		document=cmisService.DownloadDocument(idReunion,fileId,"OrdreDeJour",docu.getDocumentType());	
		
		ContentStream content = document.getContentStream();
		BufferedInputStream stream = new BufferedInputStream(content.getStream());
		attachment = stream.readAllBytes();
		stream.close();
		ByteArrayResource resource = new ByteArrayResource(attachment);
		HttpHeaders headers = new HttpHeaders();
		headers.add("Cache-Control", "no-cache, no-store, must-revalidate");
		String name = document.getName();
	
		headers.add(HttpHeaders.CONTENT_DISPOSITION,"inline;filename=" + name +"."+docu.getDocumentType());
		headers.add("Pragma", "no-cache");
		headers.add("Expires", "0");
		logClass.addTrack(
		 		"consultation","Evénement de log téléchargement document  "+document.getName(),/*vb.getPerson(),*/ "INFO");
		return ResponseEntity.ok().headers(headers).contentLength(attachment.length)
				.contentType(MediaType.APPLICATION_OCTET_STREAM).body(resource);
		
	}
	
	
	
	
	
	
	@GetMapping(path = "allDocumentReunion/{idReunion}")
	public ResponseEntity<List<Document>> getAllDocumentsReunion(@PathVariable("idReunion") Integer idReunion) {
		System.out.println("##### dans /getAllDocumentsReunion == " + idReunion);
		List<Document> documents= documentController.getAllDocumentsReunion(idReunion).getBody();
		System.out.println("##### documents size == " + documents.size());
		
		logClass.addTrack(
		 		"consultation","Evénement de log list document réunion ",/*vb.getPerson(),*/ "INFO");
		return new ResponseEntity<>(documents,HttpStatus.OK);
	}
	
	@PostMapping(value = "/ordreDeJour")
	public void upload( @RequestPart("file") MultipartFile files) throws IOException {
		System.out.println("##### dans /ordreDeJour");
		System.out.println("##### files == " + files.toString());
		System.out.println("##### files == " + files.getOriginalFilename());
	}
	
	@PutMapping(value = "/reunion/validation", produces = "application/json")
	public boolean testerReunion( @RequestBody Reunion reunion) {
		List<Membre> listeMembre=membreService.listMembresByReunion(reunion.getReunionId());
		logClass.addTrack(
		 		"validation","Evénement de log validation réunion ",/*vb.getPerson(),*/ "INFO");
		if(listeMembre.isEmpty() || reunion.getSalle()==null)
			validation=false;
		else
			validation=true;
		return validation;
	}
	
	@GetMapping("/statistique/mois/{years}")
	public List<StatistiqueModel> getStatistiqueNbrReunionAnnee(@PathVariable("years") Integer years){
		logClass.addTrack(
		 		"consultation","Evénement de log statistique nombre réunion ",/*vb.getPerson(),*/ "INFO");
		return reunionService.getStatistiqueReunion(years);
	}
	
	
	@GetMapping("/statistique/etat/{years}/{lang}")
	public List<StatistiqueModel> getStatistiqueReunionEtat(@PathVariable("years") Integer years,@PathVariable("lang") String lang){
		logClass.addTrack(
		 		"consultation","Evénement de log statistique réunion/etat ",/*vb.getPerson(),*/ "INFO");
		return reunionService.getStatistiqueReunionEtat(years, lang);
	}
	
	@GetMapping(value = "/exportReportExcel", produces = "application/json")
    public void exportToExcel(HttpServletResponse response) throws IOException {
    	System.out.println("##### dans exportReport ");
    	System.out.println("Export to Excel ...");
        response.setContentType("application/octet-stream");
        DateFormat dateFormatter = new SimpleDateFormat("yyyy-MM-dd_HH:mm:ss");
        String currentDateTime = dateFormatter.format(new Date());
        String headerKey = "Content-Disposition";
        String headerValue = "attachment; filename=articles_" + currentDateTime + ".xlsx";
        response.setHeader(headerKey, headerValue);
        List<Reunion> listReunions =(List<Reunion>) reunionService.findAll();
        ArticleExcel excel = new ArticleExcel(listReunions);
        excel.export(response);    
        logClass.addTrack(
		 		"enregistrement","Evénement de log export rapport excel ",/*vb.getPerson(),*/ "INFO");
    } 
    
    
    
	@GetMapping(value = "/exportReportPdf", produces = "application/json")
	public ResponseEntity<byte[]> exportToPdf(HttpServletResponse response) {

		System.out.println("##### dans exportReport ");
		try {
			// create employee data
			

			List<Reunion> reunionLst = (List<Reunion>) getAllReunions();
			RapportModel rapport= new RapportModel();
			rapport.setListReunions(reunionLst);
			
			String nomTemplate="ListeReunionKarim.jrxml";
			  logClass.addTrack(
				 		"enregistrement","Evénement de log export rapport Pdf ",/*vb.getPerson(),*/ "INFO");
			return 	export.exportToPdf(response, reunionLst,nomTemplate);

		} catch(Exception e) {
			e.printStackTrace();
			return new ResponseEntity<byte[]>(HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
	
	
	
	@DeleteMapping("/deleteDocument/{docId}")
	public ResponseEntity<?> deleteDocument(
    		@PathVariable("docId") Integer docId) {
		LinkedHashMap<String, String> msg = new LinkedHashMap<String, String>();

		
		Document docu = documentService.getDocumentById(docId);
		
		org.apache.chemistry.opencmis.client.api.Document document;	
		try {
			// delete document dans la table document by document id 
			documentService.delete(docId); 
			
			// delete Folder from alfresco server 
			if(docu.getDocumentTypeUpload().equals("Numérique")) {
		cmisService.deleteFolder(docu.getReunion().getReunionId(),docId,"OrdreDeJour",docu.getDocumentType()); 
			}
		msg.put("message", "files Deleted succesfully");
		logClass.addTrack(
		 		"suppression","Evénement de log suppression document "+docu.getIdDocument()+"-"+docu.getDocumentNom(),/*vb.getPerson(),*/ "INFO");
		
		return ResponseEntity.status(202).body(msg);
		}catch (Exception e) {
		 
			msg.put("message", "Could not delete the file");
			return ResponseEntity.status(HttpStatus.EXPECTATION_FAILED).body(msg); 
			
		}
	}
	
 
	
	@PutMapping(value = "/updateDocumentReunion"  )
	public ResponseEntity<Object> updateDocumentReunion(@RequestPart(name = "file", required = false) MultipartFile files,
			@RequestPart(name = "doc") Document document) throws IOException{
		String typeUpload; String folderName; String name ; String extension;

            if(document.getDocumentTypeUpload().equals("Numérique")) {
            if(files!=null) {
   
            typeUpload="non";
            folderName="OrdreDeJour_"+document.getReunion().getReunionId();
                name =  files.getOriginalFilename();
            extension = name.substring(name.lastIndexOf(".") + 1);
            document.setDocumentType(extension); 
            		document.setDocumentType(extension); 
		document.setDocumentNom(folderName+"_Doc"+document.getIdDocument()+"."+extension );
 
            return documentController.updateDocument(document,files,folderName);
            }else {
          
                typeUpload="non";
                
               Document doc=  documentService.save(document, typeUpload);
                logClass.addTrack(
        		 		"modification","Evénement de log modification document "+doc.getIdDocument()+"-"+doc.getDocumentNom(),/*vb.getPerson(),*/ "INFO");
        		
                return ResponseEntity.ok(doc);
            }

            }
            else {

             if (!document.getDocumentTypeUpload().equals("Numérique")) {
           
                typeUpload="nom";
            }else {
         
                
                name = files.getOriginalFilename();
            extension = name.substring(name.lastIndexOf(".") + 1);
            folderName="OrdreDeJour_"+document.getReunion().getReunionId();
                document.setDocumentType(extension); 
                typeUpload="non";
                		document.setDocumentType(extension); 
		document.setDocumentNom(folderName+"_Doc"+document.getIdDocument()+"."+extension );
 
                documentController.updateDocument(document,files,folderName);
            }
             
             Document doc=  documentService.save(document, typeUpload);
             logClass.addTrack(
     		 		"modification","Evénement de log modification document "+doc.getIdDocument()+"-"+doc.getDocumentNom(),/*vb.getPerson(),*/ "INFO");
     		
            return ResponseEntity.ok(doc);
            }
            }
            

}
